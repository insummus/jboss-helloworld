#!/bin/sh

# Source code provided to STI is at ${HOME}/source
LOCAL_SOURCE_DIR=${HOME}/source
mkdir -p $LOCAL_SOURCE_DIR

DEPLOY_DIR=$JWS_HOME/webapps

# the subdirectory within LOCAL_SOURCE_DIR from where we should copy build artifacts
ARTIFACT_DIR=${ARTIFACT_DIR-target}

# insert settings for HTTP proxy into settings.xml if supplied
function configure_proxy() {
  if [ -n "$HTTP_PROXY_HOST" -a -n "$HTTP_PROXY_PORT" ]; then
  xml="<proxy>\
         <id>genproxy</id>\
         <active>true</active>\
         <protocol>http</protocol>\
         <host>$HTTP_PROXY_HOST</host>\
         <port>$HTTP_PROXY_PORT</port>\
       </proxy>"
    sed -i "s|<!-- ### configured http proxy ### -->|$xml|" $HOME/.m2/settings.xml
  fi
}
configure_proxy

# insert settings for mirrors/repository managers into settings.xml if supplied
function configure_mirrors() {
  if [ -n "$MAVEN_MIRROR_URL" ]; then
    xml="    <mirror>\
      <id>mirror.default</id>\
      <url>$MAVEN_MIRROR_URL</url>\
      <mirrorOf>external:*</mirrorOf>\
    </mirror>"
    sed -i "s|<!-- ### configured mirrors ### -->|$xml|" $HOME/.m2/settings.xml
  fi
}
configure_mirrors

function copy_artifacts() {
  if [ -d $LOCAL_SOURCE_DIR/$1 ]; then
    echo "Copying all WAR artifacts from $LOCAL_SOURCE_DIR/$1 directory into $DEPLOY_DIR for later deployment..."
    cp -v $LOCAL_SOURCE_DIR/$1/*.war $DEPLOY_DIR 2> /dev/null
  fi
}

# Copy the source for compilation
cp -ad /tmp/src/* $LOCAL_SOURCE_DIR

# If a pom.xml is present, this is a normal build scenario
# so run maven.
if [ -f "$LOCAL_SOURCE_DIR/pom.xml" ]; then
  pushd $LOCAL_SOURCE_DIR &> /dev/null

  if [ -z "$MAVEN_ARGS" ]; then
    export MAVEN_ARGS="package -Popenshift -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
  fi

  echo "Found pom.xml... attempting to build with 'mvn -e ${MAVEN_ARGS}'"

  echo "Maven version:"
  mvn --version

  # Execute the actual build
  mvn -e $MAVEN_ARGS

  ERR=$?
  if [ $ERR -ne 0 ]; then
    echo "Aborting due to error code $ERR from Maven build"
    exit $ERR
  fi

  # Copy built artifacts (if any!) from the target/ directory
  # to the $DEPLOY_DIR directory for later deployment
  copy_artifacts "$ARTIFACT_DIR"

  # clean up after maven
  mvn clean
  #if [ -d "$HOME/.m2/repository" ]; then
  #  rm -r "$HOME/.m2/repository"
  #fi

  popd &> /dev/null
fi

# Copy (probably binary) artifacts from the deployments/
# directory to the $DEPLOY_DIR directory for later deployment
copy_artifacts "deployments"

if [ -d $LOCAL_SOURCE_DIR/configuration ]; then
  echo "Copying config files from project..."
  cp -v $LOCAL_SOURCE_DIR/configuration/* $JWS_HOME/conf/
fi
